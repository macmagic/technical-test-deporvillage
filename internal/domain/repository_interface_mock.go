// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package domain

import (
	"sync"
)

// Ensure, that RepositoryMock does implement Repository.
// If this is not the case, regenerate this file with moq.
var _ Repository = &RepositoryMock{}

// RepositoryMock is a mock implementation of Repository.
//
// 	func TestSomethingThatUsesRepository(t *testing.T) {
//
// 		// make and configure a mocked Repository
// 		mockedRepository := &RepositoryMock{
// 			SaveSkuFunc: func(sku string)  {
// 				panic("mock out the SaveSku method")
// 			},
// 		}
//
// 		// use mockedRepository in code that requires Repository
// 		// and then make assertions.
//
// 	}
type RepositoryMock struct {
	// SaveSkuFunc mocks the SaveSku method.
	SaveSkuFunc func(sku string)

	// calls tracks calls to the methods.
	calls struct {
		// SaveSku holds details about calls to the SaveSku method.
		SaveSku []struct {
			// Sku is the sku argument value.
			Sku string
		}
	}
	lockSaveSku sync.RWMutex
}

// SaveSku calls SaveSkuFunc.
func (mock *RepositoryMock) SaveSku(sku string) {
	if mock.SaveSkuFunc == nil {
		panic("RepositoryMock.SaveSkuFunc: method is nil but Repository.SaveSku was just called")
	}
	callInfo := struct {
		Sku string
	}{
		Sku: sku,
	}
	mock.lockSaveSku.Lock()
	mock.calls.SaveSku = append(mock.calls.SaveSku, callInfo)
	mock.lockSaveSku.Unlock()
	mock.SaveSkuFunc(sku)
}

// SaveSkuCalls gets all the calls that were made to SaveSku.
// Check the length with:
//     len(mockedRepository.SaveSkuCalls())
func (mock *RepositoryMock) SaveSkuCalls() []struct {
	Sku string
} {
	var calls []struct {
		Sku string
	}
	mock.lockSaveSku.RLock()
	calls = mock.calls.SaveSku
	mock.lockSaveSku.RUnlock()
	return calls
}
